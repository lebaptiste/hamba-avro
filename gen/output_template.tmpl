package {{ .PackageName }}

// Code generated by avro/gen. DO NOT EDIT.

{{- $encoders := .WithEncoders }}
{{ if len .Imports }}
	import (
	{{- range .Imports }}
		"{{ . }}"
	{{- end }}
	)
{{ end }}

{{- range .Typedefs }}
	// {{ .Name }} is a generated struct.
	type {{ .Name }} struct {
	{{- range .Fields }}
		{{- $f := . }}
		{{- if $f.AvroFieldDoc }}
		// {{ $f.AvroFieldDoc }}
		{{- end }}
		{{ .Name }} {{ .Type }} `avro:"{{ $f.AvroFieldName }}"
		{{- range $tag, $style := .Tags }}
			{{- " "}}{{ $tag }}:"
			{{- if eq $style "kebab" }}{{ kebab $f.AvroFieldName }}
			{{- else if eq $style "upper-camel"}}{{ upperCamel $f.AvroFieldName }}
			{{- else if eq $style "camel"}}{{ camel $f.AvroFieldName }}
			{{- else if eq $style "snake"}}{{ snake $f.AvroFieldName }}
			{{- else}}{{ $f.AvroFieldName }}
			{{- end}}"
		{{- end }}`
	{{- end }}
	}

	{{- if $encoders }}
		var schema{{ .Name }} = avro.MustParse(`{{ .Schema }}`)

		// Schema returns the schema for {{ .Name }}.
		func (o *{{ .Name }}) Schema() avro.Schema {
		return schema{{ .Name }}
		}

		// Unmarshal decodes b into the receiver.
		func (o *{{ .Name }}) Unmarshal(b []byte) error {
		return avro.Unmarshal(o.Schema(), b, o)
		}

		// Marshal encodes the receiver.
		func (o *{{ .Name }}) Marshal() ([]byte, error) {
		return avro.Marshal(o.Schema(), o)
		}
	{{- end }}
{{ end }}
